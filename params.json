{"name":"Cached Image","tagline":"A WPF control that wraps the Image control to enable file-system based caching.","body":"<img src=\"http://floydpink.github.io/CachedImage/images/logo.png\" alt=\"logo\" width=\"300px\" style=\"box-shadow: 2px 2px 20px #ccc; border-radius: 15px;\">\r\n\r\nCachedImage [![NuGet version](https://badge.fury.io/nu/CachedImage.png)](http://badge.fury.io/nu/CachedImage) [![Build status](https://ci.appveyor.com/api/projects/status/6tb8p301yio5fmh4)](https://ci.appveyor.com/project/floydpink/cachedimage)\r\n===========\r\n\r\n##### A WPF control that wraps the Image control to enable file-system based caching.\r\n\r\n### Background\r\nIf we use the native WPF `Image` control for displaying images over the HTTP protocol (by setting the `Source` to an http url), the image will be downloaded from the server every time the control is loaded. \r\n\r\nIn its `Dedicated` mode (see `Cache Mode` below), the `Image` control present in this `CachedImage` library, wraps the native `Image` control to add a local file-system based caching capability. This control creates a local copy of the image on the first time an image is downloaded; to a configurable cache folder (defaults to `<current-user/appdata/roaming>\\AppName\\Cache`). All the subsequent loads of the control (or the page, window or app that contains the control), will display the image from the local file-system and will not download it from the server.\r\n\r\nIn its `WinINet` mode, the `Image` control uses the Temporary Internet Files directory that IE uses for the cache.\r\n\r\n### Cache Mode\r\nWe provide two cache mode: `WinINet` mode and `Dedicated` mode.\r\n* `WinINet`: This is the default mode and it takes advantage of `BitmapImage.UriCachePolicy` property and uses the Temporary Internet Files directory of IE to store cached images. The image control will have the same cache policy of IE.\r\n* `Dedicated`: Another url-based cache implementation. You can set your own cache directory. The cache will never expire unless you delete the cache folder manually.\r\n\r\n### Usage\r\n1. Install the NuGet package named `CachedImage` on the WPF project \r\n2. Add a namespace reference to the `CachedImage` assembly on the Window/Usercontrol `xmlns:cachedImage=\"clr-namespace:CachedImage;assembly=CachedImage\"` as in the example `Window` below:\r\n  ```xml\r\n  <Window x:Class=\"MyWindow1\"\r\n          xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n          xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n          xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n          xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n          xmlns:cachedImage=\"clr-namespace:CachedImage;assembly=CachedImage\">\r\n  \r\n  </Window>\r\n  ```\r\n3. Use the control and set or bind the `ImageUrl` attribute:\r\n  ```xml\r\n  \r\n      <cachedImage:Image ImageUrl=\"{Binding LargeImageUrl}\">  </cachedImage:Image>\r\n  ```\r\n4. As it is only a wrapper, all the XAML elements that could be used with the `Image` control are valid here as well:\r\n  ```xml\r\n  \r\n    <cachedImage:Image ImageUrl=\"{Binding LargeImageUrl}\">\r\n        <Image.ToolTip>This image gets cached to the file-system the first time it is downloaded</Image.ToolTip>\r\n    </cachedImage:Image>\r\n  ```\r\n5. To change cache mode, set FileCache.AppCacheMode like this:\r\n  ```csharp\r\n  \r\n    CachedImage.FileCache.AppCacheMode = CachedImage.FileCache.CacheMode.Dedicated; // The default mode is WinINet\r\n  ```\r\n6. To change the cache folder location of the dedicated cache mode, set the static string property named `AppCacheDirectory` of the `FileCache` class like this:\r\n  ```csharp\r\n  \r\n    CachedImage.FileCache.AppCacheDirectory = string.format(\"{0}\\\\MyCustomCacheFolder\\\\\",\r\n                                  Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));\r\n  ```\r\n6. Please note that the dedicated cache mode does not consider `Cache-Control` or `Expires` headers. Unless the cache folder (or specific files in it) gets deleted, the control will not fetch the file again from the server. The application could let the end-user empty the cache folder as done in the [flickr downloadr](https://github.com/flickr-downloadr/flickr-downloadr) application that uses this control.\r\n\r\n### Thanks\r\nAll of the code in this library is from the answers on a Stack Overflow question:\r\n\r\n[How do I cache images on the client for a WPF application?](http://stackoverflow.com/questions/1878060/how-do-i-cache-images-on-the-client-for-a-wpf-application). \r\n\r\nThanks to:\r\n\r\n1. [Simon Hartcher](http://stackoverflow.com/users/459159/simon-hartcher), who answered his own question [with the solution](http://stackoverflow.com/questions/1878060/how-do-i-cache-images-on-the-client-for-a-wpf-application/1893173#1893173)\r\n\r\n2. [Jeroen van Langen](http://stackoverflow.com/users/641271/jeroen-van-langen) for [the wonderful refacoring](http://stackoverflow.com/questions/1878060/how-do-i-cache-images-on-the-client-for-a-wpf-application/5175424#5175424) of Simon's solution\r\n\r\n3. [Ivan Leonenko](http://stackoverflow.com/users/367287/ivan-leonenko) for [the tweaks to make the control bindable](http://stackoverflow.com/questions/1878060/how-do-i-cache-images-on-the-client-for-a-wpf-application/12638859#12638859).\r\n\r\n4. [Aybe](https://github.com/aybe) for the fix for non-ascii characters in the path ([#1](https://github.com/floydpink/CachedImage/pull/1))\r\n\r\n5. [Saiqi Jia](https://github.com/stackia) for the enhancement of adding another IE based caching ([#5](https://github.com/floydpink/CachedImage/pull/5))\r\n\r\n### License\r\n\r\n[MIT License](https://raw.github.com/floydpink/CachedImage/master/LICENSE)\r\n","google":"UA-36383654-5","note":"Don't delete this file! It's used internally to help with page regeneration."}